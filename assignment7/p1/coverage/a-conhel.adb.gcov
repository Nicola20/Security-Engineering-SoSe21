        -:    0:Source:/home/philipp/opt/GNAT/2021/lib/gcc/x86_64-pc-linux-gnu/10.3.1/adainclude/a-conhel.adb
        -:    0:Graph:/mnt/c/wsl_share/1_FS_Master/Security_Engineering/Security-Engineering-SoSe21/assignment7/p1/bin/graphalg_test_tg.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:------------------------------------------------------------------------------
        -:    2:--                                                                          --
        -:    3:--                         GNAT LIBRARY COMPONENTS                          --
        -:    4:--                                                                          --
        -:    5:--               A D A . C O N T A I N E R S . H E L P E R S                --
        -:    6:--                                                                          --
        -:    7:--                                 B o d y                                  --
        -:    8:--                                                                          --
        -:    9:--           Copyright (C) 2015-2021, Free Software Foundation, Inc.        --
        -:   10:--                                                                          --
        -:   11:-- GNAT is free software;  you can  redistribute it  and/or modify it under --
        -:   12:-- terms of the  GNU General Public License as published  by the Free Soft- --
        -:   13:-- ware  Foundation;  either version 3,  or (at your option) any later ver- --
        -:   14:-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
        -:   15:-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
        -:   16:-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
        -:   17:--                                                                          --
        -:   18:--                                                                          --
        -:   19:--                                                                          --
        -:   20:--                                                                          --
        -:   21:--                                                                          --
        -:   22:-- You should have received a copy of the GNU General Public License and    --
        -:   23:-- a copy of the GCC Runtime Library Exception along with this program;     --
        -:   24:-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
        -:   25:-- <http://www.gnu.org/licenses/>.                                          --
        -:   26:------------------------------------------------------------------------------
        -:   27:
        -:   28:package body Ada.Containers.Helpers is
        -:   29:
        -:   30:   Max_Count : constant := 2**31 - 1;
        -:   31:   --  Used in assertions below, to make sure the counts don't wrap around.
        -:   32:   --  This can help detect bugs in which Adjust and Finalize calls are
        -:   33:   --  improperly generated. An extra Decrement could otherwise cause
        -:   34:   --  wraparound from 0 to 2**32-1. The highest count seen so far is
        -:   35:   --  around 25, so this should be plenty.
        -:   36:
        -:   37:   package body Generic_Implementation is
        -:   38:
        -:   39:      use type SAC.Atomic_Unsigned;
        -:   40:
        -:   41:      ------------
        -:   42:      -- Adjust --
        -:   43:      ------------
        -:   44:
    #####:   45:      procedure Adjust (Control : in out Reference_Control_Type) is
        -:   46:      begin
    #####:   47:         if Control.T_Counts /= null then
    #####:   48:            Busy (Control.T_Counts.all);
        -:   49:         end if;
    #####:   50:      end Adjust;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__adjust.350:
    #####:   45:      procedure Adjust (Control : in out Reference_Control_Type) is
        -:   46:      begin
    #####:   47:         if Control.T_Counts /= null then
    #####:   48:            Busy (Control.T_Counts.all);
        -:   49:         end if;
    #####:   50:      end Adjust;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__adjust.358:
    #####:   45:      procedure Adjust (Control : in out Reference_Control_Type) is
        -:   46:      begin
    #####:   47:         if Control.T_Counts /= null then
    #####:   48:            Busy (Control.T_Counts.all);
        -:   49:         end if;
    #####:   50:      end Adjust;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__adjust.709:
    #####:   45:      procedure Adjust (Control : in out Reference_Control_Type) is
        -:   46:      begin
    #####:   47:         if Control.T_Counts /= null then
    #####:   48:            Busy (Control.T_Counts.all);
        -:   49:         end if;
    #####:   50:      end Adjust;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__adjust.717:
    #####:   45:      procedure Adjust (Control : in out Reference_Control_Type) is
        -:   46:      begin
    #####:   47:         if Control.T_Counts /= null then
    #####:   48:            Busy (Control.T_Counts.all);
        -:   49:         end if;
    #####:   50:      end Adjust;
------------------
        -:   51:
        -:   52:      ----------
        -:   53:      -- Busy --
        -:   54:      ----------
        -:   55:
    #####:   56:      procedure Busy (T_Counts : in out Tamper_Counts) is
        -:   57:      begin
        -:   58:         if T_Check then
    #####:   59:            SAC.Increment (T_Counts.Busy);
    #####:   60:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:   61:         end if;
    #####:   62:      end Busy;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__busy.118:
    #####:   56:      procedure Busy (T_Counts : in out Tamper_Counts) is
        -:   57:      begin
        -:   58:         if T_Check then
    #####:   59:            SAC.Increment (T_Counts.Busy);
    #####:   60:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:   61:         end if;
    #####:   62:      end Busy;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__busy.245:
    #####:   56:      procedure Busy (T_Counts : in out Tamper_Counts) is
        -:   57:      begin
        -:   58:         if T_Check then
    #####:   59:            SAC.Increment (T_Counts.Busy);
    #####:   60:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:   61:         end if;
    #####:   62:      end Busy;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__busy.477:
    #####:   56:      procedure Busy (T_Counts : in out Tamper_Counts) is
        -:   57:      begin
        -:   58:         if T_Check then
    #####:   59:            SAC.Increment (T_Counts.Busy);
    #####:   60:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:   61:         end if;
    #####:   62:      end Busy;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__busy.604:
    #####:   56:      procedure Busy (T_Counts : in out Tamper_Counts) is
        -:   57:      begin
        -:   58:         if T_Check then
    #####:   59:            SAC.Increment (T_Counts.Busy);
    #####:   60:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:   61:         end if;
    #####:   62:      end Busy;
------------------
        -:   63:
        -:   64:      --------------
        -:   65:      -- Finalize --
        -:   66:      --------------
        -:   67:
    #####:   68:      procedure Finalize (Control : in out Reference_Control_Type) is
        -:   69:      begin
    #####:   70:         if Control.T_Counts /= null then
    #####:   71:            Unbusy (Control.T_Counts.all);
    #####:   72:            Control.T_Counts := null;
        -:   73:         end if;
    #####:   74:      end Finalize;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__finalize.349:
    #####:   68:      procedure Finalize (Control : in out Reference_Control_Type) is
        -:   69:      begin
    #####:   70:         if Control.T_Counts /= null then
    #####:   71:            Unbusy (Control.T_Counts.all);
    #####:   72:            Control.T_Counts := null;
        -:   73:         end if;
    #####:   74:      end Finalize;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__finalize.357:
    #####:   68:      procedure Finalize (Control : in out Reference_Control_Type) is
        -:   69:      begin
    #####:   70:         if Control.T_Counts /= null then
    #####:   71:            Unbusy (Control.T_Counts.all);
    #####:   72:            Control.T_Counts := null;
        -:   73:         end if;
    #####:   74:      end Finalize;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__finalize.708:
    #####:   68:      procedure Finalize (Control : in out Reference_Control_Type) is
        -:   69:      begin
    #####:   70:         if Control.T_Counts /= null then
    #####:   71:            Unbusy (Control.T_Counts.all);
    #####:   72:            Control.T_Counts := null;
        -:   73:         end if;
    #####:   74:      end Finalize;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__finalize.716:
    #####:   68:      procedure Finalize (Control : in out Reference_Control_Type) is
        -:   69:      begin
    #####:   70:         if Control.T_Counts /= null then
    #####:   71:            Unbusy (Control.T_Counts.all);
    #####:   72:            Control.T_Counts := null;
        -:   73:         end if;
    #####:   74:      end Finalize;
------------------
        -:   75:
        -:   76:      --  No need to protect against double Finalize here, because these types
        -:   77:      --  are limited.
        -:   78:
    #####:   79:      procedure Finalize (Busy : in out With_Busy) is
        -:   80:         pragma Warnings (Off);
        -:   81:         pragma Assert (T_Check); -- not called if check suppressed
        -:   82:         pragma Warnings (On);
        -:   83:      begin
    #####:   84:         Unbusy (Busy.T_Counts.all);
    #####:   85:      end Finalize;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__finalize__2.348:
    #####:   79:      procedure Finalize (Busy : in out With_Busy) is
        -:   80:         pragma Warnings (Off);
        -:   81:         pragma Assert (T_Check); -- not called if check suppressed
        -:   82:         pragma Warnings (On);
        -:   83:      begin
    #####:   84:         Unbusy (Busy.T_Counts.all);
    #####:   85:      end Finalize;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__finalize__2.356:
    #####:   79:      procedure Finalize (Busy : in out With_Busy) is
        -:   80:         pragma Warnings (Off);
        -:   81:         pragma Assert (T_Check); -- not called if check suppressed
        -:   82:         pragma Warnings (On);
        -:   83:      begin
    #####:   84:         Unbusy (Busy.T_Counts.all);
    #####:   85:      end Finalize;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__finalize__2.707:
    #####:   79:      procedure Finalize (Busy : in out With_Busy) is
        -:   80:         pragma Warnings (Off);
        -:   81:         pragma Assert (T_Check); -- not called if check suppressed
        -:   82:         pragma Warnings (On);
        -:   83:      begin
    #####:   84:         Unbusy (Busy.T_Counts.all);
    #####:   85:      end Finalize;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__finalize__2.715:
    #####:   79:      procedure Finalize (Busy : in out With_Busy) is
        -:   80:         pragma Warnings (Off);
        -:   81:         pragma Assert (T_Check); -- not called if check suppressed
        -:   82:         pragma Warnings (On);
        -:   83:      begin
    #####:   84:         Unbusy (Busy.T_Counts.all);
    #####:   85:      end Finalize;
------------------
        -:   86:
    #####:   87:      procedure Finalize (Lock : in out With_Lock) is
        -:   88:         pragma Warnings (Off);
        -:   89:         pragma Assert (T_Check); -- not called if check suppressed
        -:   90:         pragma Warnings (On);
        -:   91:      begin
    #####:   92:         Unlock (Lock.T_Counts.all);
    #####:   93:      end Finalize;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__finalize__3.346:
    #####:   87:      procedure Finalize (Lock : in out With_Lock) is
        -:   88:         pragma Warnings (Off);
        -:   89:         pragma Assert (T_Check); -- not called if check suppressed
        -:   90:         pragma Warnings (On);
        -:   91:      begin
    #####:   92:         Unlock (Lock.T_Counts.all);
    #####:   93:      end Finalize;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__finalize__3.354:
    #####:   87:      procedure Finalize (Lock : in out With_Lock) is
        -:   88:         pragma Warnings (Off);
        -:   89:         pragma Assert (T_Check); -- not called if check suppressed
        -:   90:         pragma Warnings (On);
        -:   91:      begin
    #####:   92:         Unlock (Lock.T_Counts.all);
    #####:   93:      end Finalize;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__finalize__3.705:
    #####:   87:      procedure Finalize (Lock : in out With_Lock) is
        -:   88:         pragma Warnings (Off);
        -:   89:         pragma Assert (T_Check); -- not called if check suppressed
        -:   90:         pragma Warnings (On);
        -:   91:      begin
    #####:   92:         Unlock (Lock.T_Counts.all);
    #####:   93:      end Finalize;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__finalize__3.713:
    #####:   87:      procedure Finalize (Lock : in out With_Lock) is
        -:   88:         pragma Warnings (Off);
        -:   89:         pragma Assert (T_Check); -- not called if check suppressed
        -:   90:         pragma Warnings (On);
        -:   91:      begin
    #####:   92:         Unlock (Lock.T_Counts.all);
    #####:   93:      end Finalize;
------------------
        -:   94:
        -:   95:      ----------------
        -:   96:      -- Initialize --
        -:   97:      ----------------
        -:   98:
    #####:   99:      procedure Initialize (Busy : in out With_Busy) is
        -:  100:         pragma Warnings (Off);
        -:  101:         pragma Assert (T_Check); -- not called if check suppressed
        -:  102:         pragma Warnings (On);
        -:  103:      begin
    #####:  104:         Generic_Implementation.Busy (Busy.T_Counts.all);
    #####:  105:      end Initialize;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__initialize__2.345:
    #####:   99:      procedure Initialize (Busy : in out With_Busy) is
        -:  100:         pragma Warnings (Off);
        -:  101:         pragma Assert (T_Check); -- not called if check suppressed
        -:  102:         pragma Warnings (On);
        -:  103:      begin
    #####:  104:         Generic_Implementation.Busy (Busy.T_Counts.all);
    #####:  105:      end Initialize;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__initialize__2.353:
    #####:   99:      procedure Initialize (Busy : in out With_Busy) is
        -:  100:         pragma Warnings (Off);
        -:  101:         pragma Assert (T_Check); -- not called if check suppressed
        -:  102:         pragma Warnings (On);
        -:  103:      begin
    #####:  104:         Generic_Implementation.Busy (Busy.T_Counts.all);
    #####:  105:      end Initialize;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__initialize__2.704:
    #####:   99:      procedure Initialize (Busy : in out With_Busy) is
        -:  100:         pragma Warnings (Off);
        -:  101:         pragma Assert (T_Check); -- not called if check suppressed
        -:  102:         pragma Warnings (On);
        -:  103:      begin
    #####:  104:         Generic_Implementation.Busy (Busy.T_Counts.all);
    #####:  105:      end Initialize;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__initialize__2.712:
    #####:   99:      procedure Initialize (Busy : in out With_Busy) is
        -:  100:         pragma Warnings (Off);
        -:  101:         pragma Assert (T_Check); -- not called if check suppressed
        -:  102:         pragma Warnings (On);
        -:  103:      begin
    #####:  104:         Generic_Implementation.Busy (Busy.T_Counts.all);
    #####:  105:      end Initialize;
------------------
        -:  106:
    #####:  107:      procedure Initialize (Lock : in out With_Lock) is
        -:  108:         pragma Warnings (Off);
        -:  109:         pragma Assert (T_Check); -- not called if check suppressed
        -:  110:         pragma Warnings (On);
        -:  111:      begin
    #####:  112:         Generic_Implementation.Lock (Lock.T_Counts.all);
    #####:  113:      end Initialize;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__initialize__3.343:
    #####:  107:      procedure Initialize (Lock : in out With_Lock) is
        -:  108:         pragma Warnings (Off);
        -:  109:         pragma Assert (T_Check); -- not called if check suppressed
        -:  110:         pragma Warnings (On);
        -:  111:      begin
    #####:  112:         Generic_Implementation.Lock (Lock.T_Counts.all);
    #####:  113:      end Initialize;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__initialize__3.351:
    #####:  107:      procedure Initialize (Lock : in out With_Lock) is
        -:  108:         pragma Warnings (Off);
        -:  109:         pragma Assert (T_Check); -- not called if check suppressed
        -:  110:         pragma Warnings (On);
        -:  111:      begin
    #####:  112:         Generic_Implementation.Lock (Lock.T_Counts.all);
    #####:  113:      end Initialize;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__initialize__3.702:
    #####:  107:      procedure Initialize (Lock : in out With_Lock) is
        -:  108:         pragma Warnings (Off);
        -:  109:         pragma Assert (T_Check); -- not called if check suppressed
        -:  110:         pragma Warnings (On);
        -:  111:      begin
    #####:  112:         Generic_Implementation.Lock (Lock.T_Counts.all);
    #####:  113:      end Initialize;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__initialize__3.710:
    #####:  107:      procedure Initialize (Lock : in out With_Lock) is
        -:  108:         pragma Warnings (Off);
        -:  109:         pragma Assert (T_Check); -- not called if check suppressed
        -:  110:         pragma Warnings (On);
        -:  111:      begin
    #####:  112:         Generic_Implementation.Lock (Lock.T_Counts.all);
    #####:  113:      end Initialize;
------------------
        -:  114:
        -:  115:      ----------
        -:  116:      -- Lock --
        -:  117:      ----------
        -:  118:
    #####:  119:      procedure Lock (T_Counts : in out Tamper_Counts) is
        -:  120:      begin
        -:  121:         if T_Check then
    #####:  122:            SAC.Increment (T_Counts.Lock);
    #####:  123:            pragma Assert (T_Counts.Lock <= Max_Count);
    #####:  124:            SAC.Increment (T_Counts.Busy);
    #####:  125:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  126:         end if;
    #####:  127:      end Lock;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__lock.344:
    #####:  119:      procedure Lock (T_Counts : in out Tamper_Counts) is
        -:  120:      begin
        -:  121:         if T_Check then
    #####:  122:            SAC.Increment (T_Counts.Lock);
    #####:  123:            pragma Assert (T_Counts.Lock <= Max_Count);
    #####:  124:            SAC.Increment (T_Counts.Busy);
    #####:  125:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  126:         end if;
    #####:  127:      end Lock;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__lock.352:
    #####:  119:      procedure Lock (T_Counts : in out Tamper_Counts) is
        -:  120:      begin
        -:  121:         if T_Check then
    #####:  122:            SAC.Increment (T_Counts.Lock);
    #####:  123:            pragma Assert (T_Counts.Lock <= Max_Count);
    #####:  124:            SAC.Increment (T_Counts.Busy);
    #####:  125:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  126:         end if;
    #####:  127:      end Lock;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__lock.703:
    #####:  119:      procedure Lock (T_Counts : in out Tamper_Counts) is
        -:  120:      begin
        -:  121:         if T_Check then
    #####:  122:            SAC.Increment (T_Counts.Lock);
    #####:  123:            pragma Assert (T_Counts.Lock <= Max_Count);
    #####:  124:            SAC.Increment (T_Counts.Busy);
    #####:  125:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  126:         end if;
    #####:  127:      end Lock;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__lock.711:
    #####:  119:      procedure Lock (T_Counts : in out Tamper_Counts) is
        -:  120:      begin
        -:  121:         if T_Check then
    #####:  122:            SAC.Increment (T_Counts.Lock);
    #####:  123:            pragma Assert (T_Counts.Lock <= Max_Count);
    #####:  124:            SAC.Increment (T_Counts.Busy);
    #####:  125:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  126:         end if;
    #####:  127:      end Lock;
------------------
        -:  128:
        -:  129:      --------------
        -:  130:      -- TC_Check --
        -:  131:      --------------
        -:  132:
    #####:  133:      procedure TC_Check (T_Counts : Tamper_Counts) is
        -:  134:      begin
        -:  135:         if T_Check then
    #####:  136:            if T_Counts.Busy > 0 then
    #####:  137:               raise Program_Error with
        -:  138:                 "attempt to tamper with cursors";
        -:  139:            end if;
        -:  140:
        -:  141:            --  The lock status (which monitors "element tampering") always
        -:  142:            --  implies that the busy status (which monitors "cursor
        -:  143:            --  tampering") is set too; this is a representation invariant.
        -:  144:            --  Thus if the busy count is zero, then the lock count
        -:  145:            --  must also be zero.
        -:  146:
    #####:  147:            pragma Assert (T_Counts.Lock = 0);
        -:  148:         end if;
    #####:  149:      end TC_Check;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__tc_check.113:
    #####:  133:      procedure TC_Check (T_Counts : Tamper_Counts) is
        -:  134:      begin
        -:  135:         if T_Check then
    #####:  136:            if T_Counts.Busy > 0 then
    #####:  137:               raise Program_Error with
        -:  138:                 "attempt to tamper with cursors";
        -:  139:            end if;
        -:  140:
        -:  141:            --  The lock status (which monitors "element tampering") always
        -:  142:            --  implies that the busy status (which monitors "cursor
        -:  143:            --  tampering") is set too; this is a representation invariant.
        -:  144:            --  Thus if the busy count is zero, then the lock count
        -:  145:            --  must also be zero.
        -:  146:
    #####:  147:            pragma Assert (T_Counts.Lock = 0);
        -:  148:         end if;
    #####:  149:      end TC_Check;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__tc_check.240:
    #####:  133:      procedure TC_Check (T_Counts : Tamper_Counts) is
        -:  134:      begin
        -:  135:         if T_Check then
    #####:  136:            if T_Counts.Busy > 0 then
    #####:  137:               raise Program_Error with
        -:  138:                 "attempt to tamper with cursors";
        -:  139:            end if;
        -:  140:
        -:  141:            --  The lock status (which monitors "element tampering") always
        -:  142:            --  implies that the busy status (which monitors "cursor
        -:  143:            --  tampering") is set too; this is a representation invariant.
        -:  144:            --  Thus if the busy count is zero, then the lock count
        -:  145:            --  must also be zero.
        -:  146:
    #####:  147:            pragma Assert (T_Counts.Lock = 0);
        -:  148:         end if;
    #####:  149:      end TC_Check;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__tc_check.472:
    #####:  133:      procedure TC_Check (T_Counts : Tamper_Counts) is
        -:  134:      begin
        -:  135:         if T_Check then
    #####:  136:            if T_Counts.Busy > 0 then
    #####:  137:               raise Program_Error with
        -:  138:                 "attempt to tamper with cursors";
        -:  139:            end if;
        -:  140:
        -:  141:            --  The lock status (which monitors "element tampering") always
        -:  142:            --  implies that the busy status (which monitors "cursor
        -:  143:            --  tampering") is set too; this is a representation invariant.
        -:  144:            --  Thus if the busy count is zero, then the lock count
        -:  145:            --  must also be zero.
        -:  146:
    #####:  147:            pragma Assert (T_Counts.Lock = 0);
        -:  148:         end if;
    #####:  149:      end TC_Check;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__tc_check.599:
    #####:  133:      procedure TC_Check (T_Counts : Tamper_Counts) is
        -:  134:      begin
        -:  135:         if T_Check then
    #####:  136:            if T_Counts.Busy > 0 then
    #####:  137:               raise Program_Error with
        -:  138:                 "attempt to tamper with cursors";
        -:  139:            end if;
        -:  140:
        -:  141:            --  The lock status (which monitors "element tampering") always
        -:  142:            --  implies that the busy status (which monitors "cursor
        -:  143:            --  tampering") is set too; this is a representation invariant.
        -:  144:            --  Thus if the busy count is zero, then the lock count
        -:  145:            --  must also be zero.
        -:  146:
    #####:  147:            pragma Assert (T_Counts.Lock = 0);
        -:  148:         end if;
    #####:  149:      end TC_Check;
------------------
        -:  150:
        -:  151:      --------------
        -:  152:      -- TE_Check --
        -:  153:      --------------
        -:  154:
    #####:  155:      procedure TE_Check (T_Counts : Tamper_Counts) is
        -:  156:      begin
    #####:  157:         if T_Check and then T_Counts.Lock > 0 then
    #####:  158:            raise Program_Error with
        -:  159:              "attempt to tamper with elements";
        -:  160:         end if;
    #####:  161:      end TE_Check;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__te_check.103:
    #####:  155:      procedure TE_Check (T_Counts : Tamper_Counts) is
        -:  156:      begin
    #####:  157:         if T_Check and then T_Counts.Lock > 0 then
    #####:  158:            raise Program_Error with
        -:  159:              "attempt to tamper with elements";
        -:  160:         end if;
    #####:  161:      end TE_Check;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__te_check.230:
    #####:  155:      procedure TE_Check (T_Counts : Tamper_Counts) is
        -:  156:      begin
    #####:  157:         if T_Check and then T_Counts.Lock > 0 then
    #####:  158:            raise Program_Error with
        -:  159:              "attempt to tamper with elements";
        -:  160:         end if;
    #####:  161:      end TE_Check;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__te_check.462:
    #####:  155:      procedure TE_Check (T_Counts : Tamper_Counts) is
        -:  156:      begin
    #####:  157:         if T_Check and then T_Counts.Lock > 0 then
    #####:  158:            raise Program_Error with
        -:  159:              "attempt to tamper with elements";
        -:  160:         end if;
    #####:  161:      end TE_Check;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__te_check.589:
    #####:  155:      procedure TE_Check (T_Counts : Tamper_Counts) is
        -:  156:      begin
    #####:  157:         if T_Check and then T_Counts.Lock > 0 then
    #####:  158:            raise Program_Error with
        -:  159:              "attempt to tamper with elements";
        -:  160:         end if;
    #####:  161:      end TE_Check;
------------------
        -:  162:
        -:  163:      ------------
        -:  164:      -- Unbusy --
        -:  165:      ------------
        -:  166:
    #####:  167:      procedure Unbusy (T_Counts : in out Tamper_Counts) is
        -:  168:      begin
        -:  169:         if T_Check then
    #####:  170:            SAC.Decrement (T_Counts.Busy);
    #####:  171:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  172:         end if;
    #####:  173:      end Unbusy;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__unbusy.178:
    #####:  167:      procedure Unbusy (T_Counts : in out Tamper_Counts) is
        -:  168:      begin
        -:  169:         if T_Check then
    #####:  170:            SAC.Decrement (T_Counts.Busy);
    #####:  171:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  172:         end if;
    #####:  173:      end Unbusy;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__unbusy.307:
    #####:  167:      procedure Unbusy (T_Counts : in out Tamper_Counts) is
        -:  168:      begin
        -:  169:         if T_Check then
    #####:  170:            SAC.Decrement (T_Counts.Busy);
    #####:  171:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  172:         end if;
    #####:  173:      end Unbusy;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__unbusy.537:
    #####:  167:      procedure Unbusy (T_Counts : in out Tamper_Counts) is
        -:  168:      begin
        -:  169:         if T_Check then
    #####:  170:            SAC.Decrement (T_Counts.Busy);
    #####:  171:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  172:         end if;
    #####:  173:      end Unbusy;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__unbusy.666:
    #####:  167:      procedure Unbusy (T_Counts : in out Tamper_Counts) is
        -:  168:      begin
        -:  169:         if T_Check then
    #####:  170:            SAC.Decrement (T_Counts.Busy);
    #####:  171:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  172:         end if;
    #####:  173:      end Unbusy;
------------------
        -:  174:
        -:  175:      ------------
        -:  176:      -- Unlock --
        -:  177:      ------------
        -:  178:
    #####:  179:      procedure Unlock (T_Counts : in out Tamper_Counts) is
        -:  180:      begin
        -:  181:         if T_Check then
    #####:  182:            SAC.Decrement (T_Counts.Lock);
    #####:  183:            pragma Assert (T_Counts.Lock <= Max_Count);
    #####:  184:            SAC.Decrement (T_Counts.Busy);
    #####:  185:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  186:         end if;
    #####:  187:      end Unlock;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__unlock.347:
    #####:  179:      procedure Unlock (T_Counts : in out Tamper_Counts) is
        -:  180:      begin
        -:  181:         if T_Check then
    #####:  182:            SAC.Decrement (T_Counts.Lock);
    #####:  183:            pragma Assert (T_Counts.Lock <= Max_Count);
    #####:  184:            SAC.Decrement (T_Counts.Busy);
    #####:  185:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  186:         end if;
    #####:  187:      end Unlock;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__unlock.355:
    #####:  179:      procedure Unlock (T_Counts : in out Tamper_Counts) is
        -:  180:      begin
        -:  181:         if T_Check then
    #####:  182:            SAC.Decrement (T_Counts.Lock);
    #####:  183:            pragma Assert (T_Counts.Lock <= Max_Count);
    #####:  184:            SAC.Decrement (T_Counts.Busy);
    #####:  185:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  186:         end if;
    #####:  187:      end Unlock;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__unlock.706:
    #####:  179:      procedure Unlock (T_Counts : in out Tamper_Counts) is
        -:  180:      begin
        -:  181:         if T_Check then
    #####:  182:            SAC.Decrement (T_Counts.Lock);
    #####:  183:            pragma Assert (T_Counts.Lock <= Max_Count);
    #####:  184:            SAC.Decrement (T_Counts.Busy);
    #####:  185:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  186:         end if;
    #####:  187:      end Unlock;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__unlock.714:
    #####:  179:      procedure Unlock (T_Counts : in out Tamper_Counts) is
        -:  180:      begin
        -:  181:         if T_Check then
    #####:  182:            SAC.Decrement (T_Counts.Lock);
    #####:  183:            pragma Assert (T_Counts.Lock <= Max_Count);
    #####:  184:            SAC.Decrement (T_Counts.Busy);
    #####:  185:            pragma Assert (T_Counts.Busy <= Max_Count);
        -:  186:         end if;
    #####:  187:      end Unlock;
------------------
        -:  188:
        -:  189:      -----------------
        -:  190:      -- Zero_Counts --
        -:  191:      -----------------
        -:  192:
    #####:  193:      procedure Zero_Counts (T_Counts : out Tamper_Counts) is
        -:  194:      begin
        -:  195:         if T_Check then
    #####:  196:            T_Counts := (others => <>);
        -:  197:         end if;
    #####:  198:      end Zero_Counts;
------------------
graphalg_test_tg__B_8__test_graph__vertex_vectors__implementation__zero_counts.203:
    #####:  193:      procedure Zero_Counts (T_Counts : out Tamper_Counts) is
        -:  194:      begin
        -:  195:         if T_Check then
    #####:  196:            T_Counts := (others => <>);
        -:  197:         end if;
    #####:  198:      end Zero_Counts;
------------------
graphalg_test_tg__B_8__test_graph__edge_vectors__implementation__zero_counts.332:
    #####:  193:      procedure Zero_Counts (T_Counts : out Tamper_Counts) is
        -:  194:      begin
        -:  195:         if T_Check then
    #####:  196:            T_Counts := (others => <>);
        -:  197:         end if;
    #####:  198:      end Zero_Counts;
------------------
graphalg_test_tg__B_4__test_graph__vertex_vectors__implementation__zero_counts.562:
    #####:  193:      procedure Zero_Counts (T_Counts : out Tamper_Counts) is
        -:  194:      begin
        -:  195:         if T_Check then
    #####:  196:            T_Counts := (others => <>);
        -:  197:         end if;
    #####:  198:      end Zero_Counts;
------------------
graphalg_test_tg__B_4__test_graph__edge_vectors__implementation__zero_counts.691:
    #####:  193:      procedure Zero_Counts (T_Counts : out Tamper_Counts) is
        -:  194:      begin
        -:  195:         if T_Check then
    #####:  196:            T_Counts := (others => <>);
        -:  197:         end if;
    #####:  198:      end Zero_Counts;
------------------
        -:  199:
        -:  200:   end Generic_Implementation;
        -:  201:
        -:  202:end Ada.Containers.Helpers;
