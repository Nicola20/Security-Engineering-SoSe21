        -:    0:Source:/mnt/c/wsl_share/1_FS_Master/Security_Engineering/Security-Engineering-SoSe21/assignment7/p1/tests/graphalg_test_tg.adb
        -:    0:Graph:/mnt/c/wsl_share/1_FS_Master/Security_Engineering/Security-Engineering-SoSe21/assignment7/p1/bin/graphalg_test_tg.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:-- * This file has been automatically generated using `testgen'.
        -:    2:-- * Modifications should be made in the corresponding script file.
        -:    3:
        -:    4:  -- Test Driver Source
        -:    5:
        -:    6:  -- File:       /mnt/c/wsl_share/1_FS_Master/Security_Engineering/Security-Engineering-SoSe21/assignment7/p1/tests/graphalg_test_tg.adb
        -:    7:  -- Script:     /mnt/c/wsl_share/1_FS_Master/Security_Engineering/Security-Engineering-SoSe21/assignment7/p1/tests/graphalg_test_tg.ts
        -:    8:
        -:    9:
        -:   10:with Ada.Command_Line, Ada.Exceptions;
        -:   11:use type Ada.Command_Line.Exit_Status;
        -:   12:
        -:   13:with Graph;
        -:   14:with Graph_Algorithms;
        -:   15:with Ada.Text_IO;
        -:   16:use Ada.Text_IO;
        -:   17:
    #####:   18:procedure graphalg_test_tg is
        -:   19:
        -:   20:  package Driver_Internals is
        -:   21:    -- Global Data
    #####:   22:    Program_Terminate     : exception;
    #####:   23:    Fail_Result           : Boolean := False;
    #####:   24:    Unexpected_Error      : Boolean := False;
    #####:   25:    Status                : Ada.Command_Line.Exit_Status := 0;
        -:   26:    -- Data of last Test Case
    #####:   27:    Test_Case_Passed      : Boolean := False;
        -:   28:    -- Access Routines
        -:   29:    procedure Set_Path (Path : in String);
        -:   30:    function Path_Was (Path : in String) return Boolean;
        -:   31:    function Taken_Path return String;
        -:   32:    function Passed return Boolean;
        -:   33:    function Failed return Boolean;
        -:   34:  end Driver_Internals;
        -:   35:
        -:   36:  package body Driver_Internals is
        -:   37:    -- Data of last Test Case
        -:   38:    Test_Case_Path        : String (1.. 256);
    #####:   39:    Test_Case_Path_Length : Natural := 0;
        -:   40:    -- Access Routines
    #####:   41:    procedure Set_Path (Path : in String) is
        -:   42:      begin
    #####:   43:        Test_Case_Path (Test_Case_Path'First..Path'Length) := Path;
    #####:   44:        Test_Case_Path_Length := Path'Length;
    #####:   45:      end Set_Path;
    #####:   46:    function Path_Was (Path : in String) return Boolean is
        -:   47:      begin
    #####:   48:        return Test_Case_Path_Length = Path'Length
    #####:   49:            and then Test_Case_Path (1..Path'Length) = Path;
        -:   50:      end Path_Was;
    #####:   51:    function Taken_Path return String is
    #####:   52:      begin return Test_Case_Path (1..Test_Case_Path_Length); end Taken_Path;
        -:   53:    function Passed return Boolean is
        -:   54:      begin return Test_Case_Passed; end Passed;
        -:   55:    function Failed return Boolean is
        -:   56:      begin return not Test_Case_Passed; end Failed;
        -:   57:  end Driver_Internals;
        -:   58:
        -:   59:begin  -- unit main block
        -:   60:
        -:   61:  -- Code section
        -:   62:  begin
    #####:   63:    Put_line("Test Graph_Algorithms package.");
        -:   64:  end;  -- code block
        -:   65:
        -:   66:  -- Code section
        -:   67:  begin
    #####:   68:    New_Line;
        -:   69:  end;  -- code block
        -:   70:
        -:   71:  -- Code section
        -:   72:  begin
    #####:   73:    Put_line("Test Graph Creation.");
        -:   74:  end;  -- code block
        -:   75:
        -:   76:  -- Test Case (1)   (1) Test Graph Creation
    #####:   77:  declare
    #####:   78:    subtype Vertex_Type is Integer;
        -:   79:    package Test_Graph is new Graph(Vertex_Type, "=");
        -:   80:    use Test_Graph;
        -:   81:    package Graph_Algorithms_Instance is new Graph_Algorithms(Vertex_Type, "=", Test_Graph);
        -:   82:    use Graph_Algorithms_Instance;
        -:   83:    Graph_Vertices_Array: Vertex_Array(1..8);
        -:   84:  begin  -- test case
        -:   85:    begin  -- test part
    #####:   86:      Add_Vertex(1);
    #####:   87:      Add_Vertex(2);
    #####:   88:      Add_Vertex(3);
    #####:   89:      Add_Vertex(4);
    #####:   90:      Add_Vertex(5);
    #####:   91:      Add_Vertex(6);
    #####:   92:      Add_Vertex(7);
    #####:   93:      Add_Vertex(8);
    #####:   94:      Add_Edge(1,2,4);
    #####:   95:      Add_Edge(1,3,3);
    #####:   96:      Add_Edge(1,4,5);
    #####:   97:      Add_Edge(2,4,3);
    #####:   98:      Add_Edge(2,6,6);
    #####:   99:      Add_Edge(3,4,2);
    #####:  100:      Add_Edge(3,6,8);
    #####:  101:      Add_Edge(4,5,5);
    #####:  102:      Add_Edge(4,6,6);
    #####:  103:      Add_Edge(4,7,5);
    #####:  104:      Add_Edge(4,8,7);
    #####:  105:      Add_Edge(5,8,6);
    #####:  106:      Add_Edge(6,7,4);
    #####:  107:      Add_Edge(7,8,2);
    #####:  108:      Graph_Vertices_Array := To_Vertex_Array;
    #####:  109:      Driver_Internals.Set_Path ("=>");
        -:  110:    exception
    #####:  111:      when E: others =>
    #####:  112:        Driver_Internals.Set_Path (Ada.Exceptions.Exception_Name (E));
        -:  113:    end;  -- test part
        -:  114:    begin  -- result part
    #####:  115:      if Driver_Internals.Path_Was ("=>") then
        -:  116:        if (Graph_Vertices_Array'Length = 8)
    #####:  117:              AND Has_Edge(1, 2)
    #####:  118:              AND Has_Edge(1, 3)
    #####:  119:              AND Has_Edge(1, 4)
    #####:  120:              AND Has_Edge(2, 4)
    #####:  121:              AND Has_Edge(2, 6)
    #####:  122:              AND Has_Edge(3, 4)
    #####:  123:              AND Has_Edge(3, 6)
    #####:  124:              AND Has_Edge(4, 5)
    #####:  125:              AND Has_Edge(4, 6)
    #####:  126:              AND Has_Edge(4, 7)
    #####:  127:              AND Has_Edge(4, 8)
    #####:  128:              AND Has_Edge(5, 8)
    #####:  129:              AND Has_Edge(6, 7)
    #####:  130:              AND Has_Edge(7, 8)
    #####:  131:              AND (Graph_Vertices_Array(1) = 1)
    #####:  132:              AND (Graph_Vertices_Array(2) = 2)
    #####:  133:              AND (Graph_Vertices_Array(3) = 3)
    #####:  134:              AND (Graph_Vertices_Array(4) = 4)
    #####:  135:              AND (Graph_Vertices_Array(5) = 5)
    #####:  136:              AND (Graph_Vertices_Array(6) = 6)
    #####:  137:              AND (Graph_Vertices_Array(7) = 7)
    #####:  138:              AND (Graph_Vertices_Array(8) = 8)
        -:  139:        then
    #####:  140:          Driver_Internals.Test_Case_Passed := True;
    #####:  141:          Put_Line ("(1)  pass.");
        -:  142:        else
    #####:  143:          Driver_Internals.Test_Case_Passed := False;
    #####:  144:          Driver_Internals.Fail_Result := True;
    #####:  145:          Put_Line ("(1)  (1) Test Graph Creation");
    #####:  146:          Put_Line ("           Script name:'graphalg_test_tg.ts'; Line:11 ");
    #####:  147:          Put_Line ("      ...FAIL.");
    #####:  148:          Put_Line ("         (" & "path `=>' was taken, but predicate is FALSE" & ")");
        -:  149:        end if;
        -:  150:      else
    #####:  151:        Driver_Internals.Test_Case_Passed := False;
    #####:  152:        Driver_Internals.Fail_Result := True;
    #####:  153:        Put_Line ("(1)  (1) Test Graph Creation");
    #####:  154:        Put_Line ("           Script name:'graphalg_test_tg.ts'; Line:11 ");
    #####:  155:        Put_Line ("      ...FAIL.");
    #####:  156:        Put_Line ("         (" & "path `" & Driver_Internals.Taken_Path & "' when `=>' was expected" & ")");
        -:  157:      end if;
        -:  158:    exception
    =====:  159:      when Driver_Internals.Program_Terminate =>
    =====:  160:        raise;
    =====:  161:      when E: others =>
    =====:  162:        Driver_Internals.Unexpected_Error := True;
    =====:  163:        Put_Line ("ERROR: exception " & Ada.Exceptions.Exception_Name (E) & " raised in result part of test case 1.");
    =====:  164:        raise Driver_Internals.Program_Terminate;
        -:  165:    end;  -- result part
    #####:  166:  end;  -- test case
        -:  167:
        -:  168:  -- Code section
        -:  169:  begin
    #####:  170:    Put_line("Test Kruskal Algorithm.");
        -:  171:  end;  -- code block
        -:  172:
        -:  173:  -- Test Case (2)   (2) Test Kruskal Algorithm with Testgraph
    #####:  174:  declare
    #####:  175:    subtype Vertex_Type is Integer;
        -:  176:    package Test_Graph is new Graph(Vertex_Type, "=");
        -:  177:    use Test_Graph;
        -:  178:    package Graph_Algorithms_Instance is new Graph_Algorithms(Vertex_Type, "=", Test_Graph);
        -:  179:    use Graph_Algorithms_Instance;
        -:  180:    Result : Boolean;
        -:  181:  begin  -- test case
        -:  182:    begin  -- test part
    #####:  183:      Result := true;
    #####:  184:      Driver_Internals.Set_Path ("=>");
        -:  185:    exception
    =====:  186:      when E: others =>
    =====:  187:        Driver_Internals.Set_Path (Ada.Exceptions.Exception_Name (E));
        -:  188:    end;  -- test part
        -:  189:    begin  -- result part
    #####:  190:      if Driver_Internals.Path_Was ("=>") then
    #####:  191:        if (Result)
        -:  192:        then
    #####:  193:          Driver_Internals.Test_Case_Passed := True;
    #####:  194:          Put_Line ("(2)  pass.");
        -:  195:        else
    #####:  196:          Driver_Internals.Test_Case_Passed := False;
    #####:  197:          Driver_Internals.Fail_Result := True;
    #####:  198:          Put_Line ("(2)  (2) Test Kruskal Algorithm with Testgraph");
    #####:  199:          Put_Line ("           Script name:'graphalg_test_tg.ts'; Line:72 ");
    #####:  200:          Put_Line ("      ...FAIL.");
    #####:  201:          Put_Line ("         (" & "path `=>' was taken, but predicate is FALSE" & ")");
        -:  202:        end if;
        -:  203:      else
    #####:  204:        Driver_Internals.Test_Case_Passed := False;
    #####:  205:        Driver_Internals.Fail_Result := True;
    #####:  206:        Put_Line ("(2)  (2) Test Kruskal Algorithm with Testgraph");
    #####:  207:        Put_Line ("           Script name:'graphalg_test_tg.ts'; Line:72 ");
    #####:  208:        Put_Line ("      ...FAIL.");
    #####:  209:        Put_Line ("         (" & "path `" & Driver_Internals.Taken_Path & "' when `=>' was expected" & ")");
        -:  210:      end if;
        -:  211:    exception
    =====:  212:      when Driver_Internals.Program_Terminate =>
    =====:  213:        raise;
    =====:  214:      when E: others =>
    =====:  215:        Driver_Internals.Unexpected_Error := True;
    =====:  216:        Put_Line ("ERROR: exception " & Ada.Exceptions.Exception_Name (E) & " raised in result part of test case 2.");
    =====:  217:        raise Driver_Internals.Program_Terminate;
        -:  218:    end;  -- result part
    #####:  219:  end;  -- test case
        -:  220:
        -:  221:  --  End of test cases
    #####:  222:  New_Line;
    #####:  223:  Put ("Script name 'graphalg_test_tg.ts'");
    #####:  224:  Put ("; total test result: ");
    #####:  225:  if Driver_Internals.Fail_Result then
    #####:  226:    Put ("FAIL");
    #####:  227:    Driver_Internals.Status := 1;
        -:  228:  else
    #####:  229:    Put ("pass");
    #####:  230:    Driver_Internals.Status := 0;
        -:  231:  end if;
    #####:  232:  Put_Line (".");
    #####:  233:  New_Line;
    #####:  234:  Ada.Command_Line.Set_Exit_Status (Driver_Internals.Status);
        -:  235:
        -:  236:exception
    #####:  237:  when Driver_Internals.Program_Terminate =>
    #####:  238:    New_Line;
    #####:  239:    Put ("Total test result: ");
    #####:  240:    if Driver_Internals.Fail_Result then
    #####:  241:      Put ("FAIL");
    #####:  242:      Driver_Internals.Status := 1;
        -:  243:    else
    #####:  244:      Put ("UNDEFINED");
    #####:  245:      Driver_Internals.Status := -1;
        -:  246:    end if;
    #####:  247:    if Driver_Internals.Unexpected_Error then
    #####:  248:      Put_Line (",");
    #####:  249:      Put_Line ("        there were one or more errors outside of test cases.");
    #####:  250:      Driver_Internals.Status := -1;
        -:  251:    else
    #####:  252:      Put_Line (".");
        -:  253:    end if;
    #####:  254:    New_Line;
    #####:  255:    Ada.Command_Line.Set_Exit_Status (Driver_Internals.Status);
    #####:  256:  when E: others =>
    #####:  257:    New_Line;
    #####:  258:    Put_Line ("Unexpected exception " & Ada.Exceptions.Exception_Name (E) & " propagating out of driver.");
    #####:  259:    Put_Line ("Results are undefined.");
    #####:  260:    Driver_Internals.Status := -1;
    #####:  261:    Ada.Command_Line.Set_Exit_Status (Driver_Internals.Status);
        -:  262:
    #####:  263:end graphalg_test_tg;
